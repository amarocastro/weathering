<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Style x:Key="customAutoSuggestBox" TargetType="AutoSuggestBox">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="IsTabStop" Value="False" />
		<!--<Setter Property="TextBoxStyle" Value="{StaticResource AutoSuggestBoxTextBoxStyle}" />-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="AutoSuggestBox">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="Orientation">
								<VisualState x:Name="Landscape"/>
								<VisualState x:Name="Portrait"/>

							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border>

							<TextBox x:Name="TextBox"
                                    PlaceholderText="Search"
                                    Header="{TemplateBinding Header}"
                                    Width="{TemplateBinding Width}"
                                    BorderThickness="1"
									CornerRadius="4"
									BorderBrush="{ThemeResource SystemAccentColorLight3}"
                                    ScrollViewer.BringIntoViewOnFocusChange="False"
                                    Canvas.ZIndex="0"
                                    Margin="0"
                                    DesiredCandidateWindowAlignment="BottomEdge"
                                    TextAlignment="Left">

								<TextBox.Resources>
									<ResourceDictionary>
										<ResourceDictionary.ThemeDictionaries>
											<ResourceDictionary x:Key="Default">
												<!--<SolidColorBrush x:Key="TextControlBackground" Color="{ThemeResource SystemAccentColorLight2}" Opacity="0.6"/>-->
												<!--<SolidColorBrush x:Key="TextControlForegroundFocused" Color="Red" />-->
												<AcrylicBrush x:Key="TextControlBackground"
                                                                    TintColor="{ThemeResource SystemAccentColor}"
                                                                    Opacity="0.6"
                                                                    FallbackColor="{ThemeResource SystemAccentColor}"/>
												<SolidColorBrush x:Key="TextControlBackgroundPointerOver" Color="{ThemeResource SystemChromeLowColor}"/>
												<SolidColorBrush x:Key="TextControlBackgroundFocused" Color="{ThemeResource SystemChromeLowColor}"/>
											</ResourceDictionary>
											<ResourceDictionary x:Key="Dark">
												<SolidColorBrush x:Key="TextControlBackground" Color="{ThemeResource SystemChromeLowColor}"/>
												<SolidColorBrush x:Key="TextControlBackgroundPointerOver" Color="{ThemeResource SystemChromeLowColor}"/>
												<!--<SolidColorBrush x:Key="TextControlBackgroundFocused" Color="{ThemeResource SystemChromeLowColor}"/>
                                                <SolidColorBrush x:Key="TextControlForegroundFocused" Color="{ThemeResource SystemAltLowColor}"/>-->
											</ResourceDictionary>
										</ResourceDictionary.ThemeDictionaries>
									</ResourceDictionary>
								</TextBox.Resources>
							</TextBox>
						</Border>
						<Popup x:Name="SuggestionsPopup">
							<Border x:Name="SuggestionsContainer" BorderThickness="0">
								<Border.RenderTransform>
									<TranslateTransform x:Name="UpwardTransform"/>
								</Border.RenderTransform>
								<ListView x:Name="SuggestionsList"
                                                Background="{ThemeResource SystemControlBackgroundChromeMediumLowBrush}"
                                                BorderThickness="0"
                                                BorderBrush="{ThemeResource SystemControlForegroundChromeHighBrush}"
                                                DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                IsItemClickEnabled="True"
                                                ItemTemplate="{TemplateBinding ItemTemplate}"
                                                ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                                MaxHeight="{ThemeResource AutoSuggestListMaxHeight}"
                                                Margin="{ThemeResource AutoSuggestListMargin}"
                                                Padding="{ThemeResource AutoSuggestListPadding}">
									<ListView.ItemContainerTransitions>
										<TransitionCollection />
									</ListView.ItemContainerTransitions>
								</ListView>
							</Border>
						</Popup>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="customSettingButton" TargetType="AppBarButton">
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="AppBarButton">
					<Button
                        Style="{ThemeResource AccentButtonStyle}"
                        BorderThickness="0"
                        Width="40"
                        Height="40">
						<Button.Resources>
							<ResourceDictionary>
								<ResourceDictionary.ThemeDictionaries>
									<ResourceDictionary x:Key="Default">
										<SolidColorBrush x:Key="AccentButtonBackgroundPressed" Color="{ThemeResource SystemChromeLowColor}" />
									</ResourceDictionary>
									<ResourceDictionary x:Key="Dark">
										<SolidColorBrush x:Key="AccentButtonBackgroundPressed" Color="{ThemeResource SystemChromeLowColor}" />
									</ResourceDictionary>
								</ResourceDictionary.ThemeDictionaries>
							</ResourceDictionary>
						</Button.Resources>
						<SymbolIcon Symbol="Setting"/>
					</Button>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--<Style x:Name="CustomTextBoxStyle" TargetType="TextBox">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsFocusEngaged" Value="False"/>
    </Style>-->
	

	<Style x:Key="MenuItemStyle" TargetType="ListViewItem">
		<Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}"/>
		<Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}"/>
		<Setter Property="Background" Value="{ThemeResource ListViewItemBackground}"/>
		<Setter Property="Foreground" Value="{ThemeResource ListViewItemForeground}"/>
		<Setter Property="TabNavigation" Value="Local"/>
		<Setter Property="IsHoldingEnabled" Value="True"/>
		<Setter Property="Padding" Value="12,0,12,0"/>
		<Setter Property="Margin" Value="0,2,0,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}"/>
		<Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}"/>
		<Setter Property="AllowDrop" Value="False"/>
		<Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}"/>
		<Setter Property="FocusVisualMargin" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ListViewItemPresenter x:Name="Root" CheckBrush="{ThemeResource ListViewItemCheckBrush}" ContentMargin="{TemplateBinding Padding}" 
										   CheckBoxBrush="{ThemeResource ListViewItemCheckBoxBrush}"
										   ContentTransitions="{TemplateBinding ContentTransitions}" 
										   CheckMode="{ThemeResource ListViewItemCheckMode}"
										   DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}"
										   DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}" 
										   DragBackground="{ThemeResource ListViewItemDragBackground}" 
										   DragForeground="{ThemeResource ListViewItemDragForeground}" 
										   FocusBorderBrush="{ThemeResource ListViewItemFocusBorderBrush}" 
										   FocusVisualMargin="{TemplateBinding FocusVisualMargin}"
										   FocusSecondaryBorderBrush="{ThemeResource ListViewItemFocusSecondaryBorderBrush}"
										   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										   Control.IsTemplateFocusTarget="True" 
										   PressedBackground="{ThemeResource ListViewItemBackgroundPressed}" 
										   PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackground}" 
										   PointerOverForeground="{ThemeResource ListViewItemForegroundPointerOver}"
										   PointerOverBackground="{ThemeResource ListViewItemBackgroundPointerOver}" 
										   RevealBorderThickness="{ThemeResource ListViewItemRevealBorderThemeThickness}" 
										   ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" 
										   RevealBorderBrush="{ThemeResource ListViewItemRevealBorderBrush}" 
										   RevealBackground="{ThemeResource ListViewItemRevealBackground}" 
										   SelectedForeground="{ThemeResource ListViewItemForegroundSelected}" 
										   SelectionCheckMarkVisualEnabled="{ThemeResource ListViewItemSelectionCheckMarkVisualEnabled}" 
										   SelectedBackground="{ThemeResource ListViewItemBackgroundSelected}"
										   SelectedPressedBackground="{ThemeResource ListViewItemBackgroundSelectedPressed}"
										   SelectedPointerOverBackground="{ThemeResource ListViewItemBackgroundSelectedPointerOver}"
										   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="Selected"/>
								<VisualState x:Name="PointerOver">
									<!--<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="PointerOver"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPointerOver}"/>
									</VisualState.Setters>-->
								</VisualState>
								<VisualState x:Name="PointerOverSelected">
									<!--<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="PointerOver"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPointerOver}"/>
									</VisualState.Setters>-->
								</VisualState>
								<VisualState x:Name="PointerOverPressed">
									<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPressed}"/>
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<!--<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPressed}"/>
									</VisualState.Setters>-->
								</VisualState>
								<VisualState x:Name="PressedSelected">
									<!--<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPressed}"/>
									</VisualState.Setters>-->
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DisabledStates">
								<VisualState x:Name="Enabled"/>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.RevealBorderThickness" Value="0"/>
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					
					</ListViewItemPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ListViewItemStyleSearch" TargetType="ListViewItem">
		<Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}"/>
		<Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{ThemeResource ListViewItemForeground}"/>
		<Setter Property="TabNavigation" Value="Local"/>
		<Setter Property="IsHoldingEnabled" Value="True"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="0,2,0,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}"/>
		<Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}"/>
		<Setter Property="AllowDrop" Value="False"/>
		<Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}"/>
		<Setter Property="FocusVisualMargin" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ListViewItemPresenter x:Name="Root" >
						<!--CheckBrush="{ThemeResource ListViewItemCheckBrush}" 
											   ContentMargin="{TemplateBinding Padding}" 
											   CheckBoxBrush="{ThemeResource ListViewItemCheckBoxBrush}"
											   ContentTransitions="{TemplateBinding ContentTransitions}" 
											   CheckMode="{ThemeResource ListViewItemCheckMode}" 
											   DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}" 
											   DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}" 
											   DragBackground="{ThemeResource ListViewItemDragBackground}" 
											   DragForeground="{ThemeResource ListViewItemDragForeground}" 
											   FocusBorderBrush="{ThemeResource ListViewItemFocusBorderBrush}"
											   FocusVisualMargin="{TemplateBinding FocusVisualMargin}" 
											   FocusSecondaryBorderBrush="{ThemeResource ListViewItemFocusSecondaryBorderBrush}" 
											   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
											   Control.IsTemplateFocusTarget="True" 
											   PressedBackground="{ThemeResource ListViewItemBackgroundPressed}" 
											   PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackground}" 
											   PointerOverForeground="{ThemeResource ListViewItemForegroundPointerOver}" 
											   PointerOverBackground="{ThemeResource ListViewItemBackgroundPointerOver}"
											   RevealBorderThickness="{ThemeResource ListViewItemRevealBorderThemeThickness}"
											   ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" 
											   RevealBorderBrush="{ThemeResource ListViewItemRevealBorderBrush}" 
											   RevealBackground="{ThemeResource ListViewItemRevealBackground}" 
											   SelectedForeground="{ThemeResource ListViewItemForegroundSelected}" 
											   SelectionCheckMarkVisualEnabled="{ThemeResource ListViewItemSelectionCheckMarkVisualEnabled}"
											   SelectedBackground="{ThemeResource ListViewItemBackgroundSelected}" 
											   SelectedPressedBackground="{ThemeResource ListViewItemBackgroundSelectedPressed}"
											   SelectedPointerOverBackground="{ThemeResource ListViewItemBackgroundSelectedPointerOver}" 
											   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">-->

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="Selected"/>
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="PointerOver"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPointerOver}"/>
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOverSelected">
									<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="PointerOver"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPointerOver}"/>
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOverPressed">
									<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPressed}"/>
									</VisualState.Setters>
								</VisualState>
								<!--<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPressed}"/>
									</VisualState.Setters>
								</VisualState>-->
								<VisualState x:Name="PressedSelected">
									<VisualState.Setters>
										<Setter Target="Root.(RevealBrush.State)" Value="Pressed"/>
										<Setter Target="Root.RevealBorderBrush" Value="{ThemeResource ListViewItemRevealBorderBrushPressed}"/>
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DisabledStates">
								<VisualState x:Name="Enabled"/>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.RevealBorderThickness" Value="0"/>
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</ListViewItemPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ButtonListItem" TargetType="Button">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BackgroundSizing" Value="OuterBorderEdge"/>
		<Setter Property="Foreground" Value="{ThemeResource ButtonForeground}"/>
		<Setter Property="BorderBrush" Value="{ThemeResource ButtonBorderBrush}"/>
		<Setter Property="BorderThickness" Value="{ThemeResource ButtonBorderThemeThickness}"/>
		<Setter Property="Padding" Value="{StaticResource ButtonPadding}"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}"/>
		<Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}"/>
		<Setter Property="FocusVisualMargin" Value="-3"/>
		<Setter Property="CornerRadius" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" BackgroundSizing="{TemplateBinding BackgroundSizing}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" CornerRadius="{TemplateBinding CornerRadius}" ContentTransitions="{TemplateBinding ContentTransitions}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>
										<PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="PointerOver">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundPointerOver}"/>
										</ObjectAnimationUsingKeyFrames>
										<!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushPointerOver}"/>
										</ObjectAnimationUsingKeyFrames>-->
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundPointerOver}"/>
										</ObjectAnimationUsingKeyFrames>
										<PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter"/>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundPressed}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushPressed}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundPressed}"/>
										</ObjectAnimationUsingKeyFrames>
										<!--<PointerDownThemeAnimation Storyboard.TargetName="ContentPresenter"/>-->
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundDisabled}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushDisabled}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundDisabled}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</ContentPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="BorderListItem" TargetType="ListViewItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Border x:Name="Border" BorderBrush="Transparent" CornerRadius="2">
						
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
</ResourceDictionary>
